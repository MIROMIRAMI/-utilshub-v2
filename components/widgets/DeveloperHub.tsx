"use client";

import { useState, useMemo, useEffect, useCallback } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Button } from '@/components/ui/button';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Checkbox } from "@/components/ui/checkbox";
import { Slider } from '@/components/ui/slider';
import { Copy, Check, AlertCircle, RefreshCw } from 'lucide-react';
import { jwtDecode, JwtPayload } from "jwt-decode";
import CryptoJS from 'crypto-js';
import { cn } from '@/lib/utils';

const JsonFormatter = () => { const [jsonInput, setJsonInput] = useState(''); const [formattedJson, setFormattedJson] = useState(''); const [error, setError] = useState(''); const [isCopied, setIsCopied] = useState(false); const handleFormat = () => { setError(''); setFormattedJson(''); if (!jsonInput.trim()) return; try { const parsed = JSON.parse(jsonInput); const formatted = JSON.stringify(parsed, null, 4); setFormattedJson(formatted); } catch (e) { if (e instanceof Error) setError(`Invalid JSON: ${e.message}`); } }; const handleCopy = () => { if (formattedJson) { navigator.clipboard.writeText(formattedJson); setIsCopied(true); setTimeout(() => setIsCopied(false), 2000); } }; return ( <div className="p-2"> <div className="grid grid-cols-1 md:grid-cols-2 gap-6"> <div className="space-y-2"><Label htmlFor="json-input">Input JSON</Label><Textarea id="json-input" placeholder='{ "name": "John" }' className="h-80 font-mono" value={jsonInput} onChange={(e) => setJsonInput(e.target.value)} /></div> <div className="space-y-2"><div className="flex justify-between items-center"><Label>Formatted JSON</Label><Button variant="ghost" size="icon" onClick={handleCopy} disabled={!formattedJson}>{isCopied ? <Check className="h-4 w-4 text-green-500" /> : <Copy className="h-4 w-4" />}</Button></div><div className="h-80 bg-muted rounded-md p-3 overflow-auto relative"><pre className="text-sm font-mono whitespace-pre-wrap"><code>{formattedJson}</code></pre></div></div> </div> <div className="mt-4 flex justify-center"><Button onClick={handleFormat} size="lg">Format JSON</Button></div> {error && (<Alert variant="destructive" className="mt-4"><AlertCircle className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)} </div> ); };
const JwtDecoder = () => { const [token, setToken] = useState(''); const [error, setError] = useState(''); const decoded = useMemo(() => { if (!token.trim()) return null; try { setError(''); const parts = token.split('.'); if (parts.length !== 3) { setError("Invalid JWT structure. A valid token must have three parts separated by dots."); return null; } const header = jwtDecode(token, { header: true }); const payload = jwtDecode<JwtPayload>(token); return { header, payload }; } catch (e) { if (e instanceof Error) setError(`Invalid Token: ${e.message}`); return null; } }, [token]); const renderJson = (data: object, title: string, color: string) => ( <div className="space-y-2"> <h3 className={`font-semibold ${color}`}>{title}</h3> <pre className="text-sm font-mono bg-muted p-3 rounded-md overflow-x-auto"> <code>{JSON.stringify(data, null, 2)}</code> </pre> </div> ); return ( <div className="p-2 space-y-4"> <div> <Label htmlFor="jwt-input">Encoded JWT</Label> <Textarea id="jwt-input" placeholder="Paste your JSON Web Token here..." className="h-32 font-mono" value={token} onChange={e => setToken(e.target.value)} /> </div> {decoded && ( <div className="grid grid-cols-1 md:grid-cols-2 gap-6"> {renderJson(decoded.header, 'Header', 'text-red-400')} {renderJson(decoded.payload, 'Payload', 'text-purple-400')} </div> )} {error && (<Alert variant="destructive" className="mt-4"><AlertCircle className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)} </div> ); };
const Base64Converter = () => { const [input, setInput] = useState('Hello, World!'); const [output, setOutput] = useState('SGVsbG8sIFdvcmxkIQ=='); const [error, setError] = useState(''); const handleEncode = () => { try { setError(''); const encoded = btoa(unescape(encodeURIComponent(input))); setOutput(encoded); } catch (e) { setError("Encoding failed. Please ensure the input is valid."); } }; const handleDecode = () => { try { setError(''); const decoded = decodeURIComponent(escape(atob(input))); setOutput(decoded); } catch (e) { setError("Decoding failed. The input may not be a valid Base64 string."); } }; return ( <div className="p-2 space-y-4"> <div className="grid grid-cols-1 md:grid-cols-2 gap-4"> <div className="space-y-2"><Label>Input</Label><Textarea value={input} onChange={e => setInput(e.target.value)} className="h-48 font-mono" /></div> <div className="space-y-2"><Label>Output</Label><Textarea value={output} readOnly className="h-48 font-mono bg-muted" /></div> </div> <div className="flex justify-center items-center gap-4"> <Button onClick={handleEncode}>Encode to Base64 &rarr;</Button> <Button onClick={handleDecode}>&larr; Decode from Base64</Button> </div> {error && (<Alert variant="destructive" className="mt-4"><AlertCircle className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)} </div> ); };
const UrlEncoder = () => { const [input, setInput] = useState('https://example.com/search?q=hello world'); const [output, setOutput] = useState('https%3A%2F%2Fexample.com%2Fsearch%3Fq%3Dhello%20world'); const handleEncode = () => setOutput(encodeURIComponent(input)); const handleDecode = () => { try { setOutput(decodeURIComponent(input)); } catch (e) { setOutput("Decoding failed: Invalid URI component."); } }; return ( <div className="p-2 space-y-4"> <div className="grid grid-cols-1 md:grid-cols-2 gap-4"> <div className="space-y-2"><Label>Input</Label><Textarea value={input} onChange={e => setInput(e.target.value)} className="h-48 font-mono" /></div> <div className="space-y-2"><Label>Output</Label><Textarea value={output} readOnly className="h-48 font-mono bg-muted" /></div> </div> <div className="flex justify-center items-center gap-4"> <Button onClick={handleEncode}>Encode URL &rarr;</Button> <Button onClick={handleDecode}>&larr; Decode URL</Button> </div> </div> ); };
const RegexTester = () => { const [pattern, setPattern] = useState('\\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}\\b'); const [flags, setFlags] = useState({ g: true, i: true, m: false }); const [testString, setTestString] = useState('Contact us at support@example.com or for sales, use sales@example.co.uk.'); const [error, setError] = useState(''); const handleFlagChange = (flag: 'g' | 'i' | 'm') => { setFlags(prev => ({...prev, [flag]: !prev[flag]})); }; const highlightedResult = useMemo(() => { if (!pattern) return {__html: testString}; try { const flagString = Object.keys(flags).filter(k => flags[k as keyof typeof flags]).join(''); const regex = new RegExp(pattern, flagString); setError(''); const matches = [...testString.matchAll(regex)]; if(matches.length === 0) return {__html: testString}; let lastIndex = 0; const parts = []; matches.forEach(match => { if(match.index === undefined) return; parts.push(testString.substring(lastIndex, match.index)); parts.push(`<mark class="bg-yellow-300 dark:bg-yellow-600 rounded px-1">${match[0]}</mark>`); lastIndex = match.index + match[0].length; }); parts.push(testString.substring(lastIndex)); return {__html: parts.join('')}; } catch (e) { if (e instanceof Error) setError(e.message); return {__html: testString}; } }, [pattern, flags, testString]); return ( <div className="p-2 space-y-4"> <div className="flex gap-4 items-end"> <div className="flex-grow space-y-2"> <Label htmlFor="regex-pattern">Regular Expression</Label> <Input id="regex-pattern" value={pattern} onChange={e => setPattern(e.target.value)} className="font-mono" placeholder="^\\w+$" /> </div> <div className="flex items-center space-x-4 pb-2"> <div className="flex items-center space-x-2"><Checkbox id="flag-g" checked={flags.g} onCheckedChange={()=>handleFlagChange('g')}/><Label htmlFor="flag-g">g</Label></div> <div className="flex items-center space-x-2"><Checkbox id="flag-i" checked={flags.i} onCheckedChange={()=>handleFlagChange('i')}/><Label htmlFor="flag-i">i</Label></div> <div className="flex items-center space-x-2"><Checkbox id="flag-m" checked={flags.m} onCheckedChange={()=>handleFlagChange('m')}/><Label htmlFor="flag-m">m</Label></div> </div> </div> <div className="space-y-2"> <Label htmlFor="test-string">Test String</Label> <Textarea id="test-string" value={testString} onChange={e => setTestString(e.target.value)} className="h-48 font-mono" /> </div> <div className="space-y-2"> <Label>Result (Matches Highlighted)</Label> <div className="h-48 bg-muted rounded-md p-3 overflow-auto" dangerouslySetInnerHTML={highlightedResult} /> </div> {error && (<Alert variant="destructive" className="mt-4"><AlertCircle className="h-4 w-4" /><AlertTitle>Regex Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)} </div> ); };
const UuidGenerator = () => { const [uuid, setUuid] = useState(''); const [isCopied, setIsCopied] = useState(false); const generateUuid = () => { setUuid(crypto.randomUUID()); }; useEffect(() => { generateUuid(); }, []); const handleCopy = () => { if (uuid) { navigator.clipboard.writeText(uuid); setIsCopied(true); setTimeout(() => setIsCopied(false), 2000); } }; return ( <div className="p-2 space-y-4 max-w-lg mx-auto"> <div className="space-y-2"> <Label>Generated UUID v4</Label> <div className="flex gap-2"> <Input readOnly value={uuid} className="font-mono text-lg h-12" /> <Button variant="ghost" size="icon" onClick={handleCopy} disabled={!uuid}> {isCopied ? <Check className="h-5 w-5 text-green-500" /> : <Copy className="h-5 w-5" />} </Button> </div> </div> <div className="text-center"> <Button onClick={generateUuid}>Generate New UUID</Button> </div> </div> ); };
const HashingCalculator = () => { const [input, setInput] = useState('Hello, World!'); const [hashes, setHashes] = useState({ md5: '', sha1: '', sha256: '', sha512: '' }); useEffect(() => { const calculateHashes = () => { setHashes({ md5: CryptoJS.MD5(input).toString(), sha1: CryptoJS.SHA1(input).toString(), sha256: CryptoJS.SHA256(input).toString(), sha512: CryptoJS.SHA512(input).toString(), }); }; calculateHashes(); }, [input]); const HashRow = ({ label, value }: { label: string, value: string }) => { const [isCopied, setIsCopied] = useState(false); const handleCopy = () => { navigator.clipboard.writeText(value); setIsCopied(true); setTimeout(() => setIsCopied(false), 2000); }; return ( <div className="flex items-center gap-2"> <Label className="w-20 text-right text-muted-foreground">{label}</Label> <Input readOnly value={value} className="font-mono bg-muted" /> <Button variant="ghost" size="icon" onClick={handleCopy}> {isCopied ? <Check className="h-4 w-4 text-green-500" /> : <Copy className="h-4 w-4" />} </Button> </div> ); }; return ( <div className="p-2 space-y-4"> <div> <Label htmlFor="hash-input">Input Text</Label> <Textarea id="hash-input" value={input} onChange={e => setInput(e.target.value)} className="h-32 font-mono" /> </div> <div className="space-y-3"> <HashRow label="MD5" value={hashes.md5} /> <HashRow label="SHA-1" value={hashes.sha1} /> <HashRow label="SHA-256" value={hashes.sha256} /> <HashRow label="SHA-512" value={hashes.sha512} /> </div> </div> ); };
const PasswordGenerator = () => { const [password, setPassword] = useState(''); const [length, setLength] = useState(16); const [options, setOptions] = useState({ uppercase: true, lowercase: true, numbers: true, symbols: true, }); const [isCopied, setIsCopied] = useState(false); const charsets = { uppercase: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', lowercase: 'abcdefghijklmnopqrstuvwxyz', numbers: '0123456789', symbols: '!@#$%^&*()_+-=[]{}|;:,.<>?' }; const generatePassword = useCallback(() => { const selectedCharsets = (Object.keys(options) as (keyof typeof options)[]).filter(key => options[key]).map(key => charsets[key]).join(''); if (!selectedCharsets) { setPassword(''); return; } let newPassword = ''; const cryptoArray = new Uint32Array(length); window.crypto.getRandomValues(cryptoArray); for (let i = 0; i < length; i++) { newPassword += selectedCharsets[cryptoArray[i] % selectedCharsets.length]; } setPassword(newPassword); }, [length, options, charsets]); useEffect(() => { generatePassword(); }, [generatePassword]); const handleCopy = () => { if (password) { navigator.clipboard.writeText(password); setIsCopied(true); setTimeout(() => setIsCopied(false), 2000); } }; const strength = useMemo(() => { let score = 0; if (length >= 12) score++; if (length >= 16) score++; if (options.uppercase) score++; if (options.lowercase) score++; if (options.numbers) score++; if (options.symbols) score++; return score; }, [length, options]); const strengthColors = ['bg-red-500', 'bg-red-500', 'bg-orange-500', 'bg-yellow-500', 'bg-green-500', 'bg-green-600']; const strengthText = ['Very Weak', 'Weak', 'Medium', 'Good', 'Strong', 'Very Strong']; return ( <div className="p-2 max-w-lg mx-auto space-y-6"> <div className="space-y-2"> <Label>Generated Password</Label> <div className="flex gap-2"> <Input readOnly value={password} className="font-mono text-lg h-12 bg-muted" /> <Button variant="ghost" size="icon" onClick={handleCopy} disabled={!password}> {isCopied ? <Check className="h-5 w-5 text-green-500" /> : <Copy className="h-5 w-5" />} </Button> </div> <div className="w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700"> <div className={cn("h-2.5 rounded-full transition-all duration-300", strengthColors[strength])} style={{ width: `${(strength / 6) * 100}%` }}></div> </div> <p className="text-sm text-center text-muted-foreground font-semibold">{strengthText[strength]}</p> </div> <div className="space-y-4 p-4 border rounded-lg"> <div className="space-y-2"> <Label>Length: {length}</Label> <Slider value={[length]} onValueChange={(v) => setLength(v[0])} min={8} max={128} step={1} /> </div> <div className="grid grid-cols-2 gap-4"> <div className="flex items-center space-x-2"><Checkbox id="uppercase" checked={options.uppercase} onCheckedChange={(c) => setOptions(o => ({ ...o, uppercase: !!c }))} /><Label htmlFor="uppercase">Uppercase (A-Z)</Label></div> <div className="flex items-center space-x-2"><Checkbox id="lowercase" checked={options.lowercase} onCheckedChange={(c) => setOptions(o => ({ ...o, lowercase: !!c }))} /><Label htmlFor="lowercase">Lowercase (a-z)</Label></div> <div className="flex items-center space-x-2"><Checkbox id="numbers" checked={options.numbers} onCheckedChange={(c) => setOptions(o => ({ ...o, numbers: !!c }))} /><Label htmlFor="numbers">Numbers (0-9)</Label></div> <div className="flex items-center space-x-2"><Checkbox id="symbols" checked={options.symbols} onCheckedChange={(c) => setOptions(o => ({ ...o, symbols: !!c }))} /><Label htmlFor="symbols">Symbols (!@#$)</Label></div> </div> </div> <div className="text-center"> <Button onClick={generatePassword} size="lg"><RefreshCw className="mr-2 h-4 w-4"/> Regenerate</Button> </div> </div> ); };

export function DeveloperHub() {
    return (
        <Card className="w-full max-w-5xl mx-auto shadow-xl shadow-gray-300/20 rounded-2xl border">
            <CardHeader className="text-center"><CardTitle className="text-3xl md:text-4xl font-bold tracking-tight">Developer Tools Hub</CardTitle><CardDescription className="text-lg pt-1">A collection of essential utilities for developers.</CardDescription></CardHeader>
            <CardContent>
                <Tabs defaultValue="json-formatter" className="w-full">
                    <TabsList className="grid w-full grid-cols-2 sm:grid-cols-4 md:grid-cols-8 h-auto">
                        <TabsTrigger value="json-formatter">JSON</TabsTrigger>
                        <TabsTrigger value="jwt-decoder">JWT</TabsTrigger>
                        <TabsTrigger value="base64">Base64</TabsTrigger>
                        <TabsTrigger value="url-encoder">URL</TabsTrigger>
                        <TabsTrigger value="regex">Regex</TabsTrigger>
                        <TabsTrigger value="uuid">UUID</TabsTrigger>
                        <TabsTrigger value="hashing">Hashing</TabsTrigger>
                        <TabsTrigger value="password">Password</TabsTrigger>
                    </TabsList>
                    <div className="pt-6">
                        <TabsContent value="json-formatter"><JsonFormatter /></TabsContent>
                        <TabsContent value="jwt-decoder"><JwtDecoder /></TabsContent>
                        <TabsContent value="base64"><Base64Converter /></TabsContent>
                        <TabsContent value="url-encoder"><UrlEncoder /></TabsContent>
                        <TabsContent value="regex"><RegexTester /></TabsContent>
                        <TabsContent value="uuid"><UuidGenerator /></TabsContent>
                        <TabsContent value="hashing"><HashingCalculator /></TabsContent>
                        <TabsContent value="password"><PasswordGenerator /></TabsContent>
                    </div>
                </Tabs>
            </CardContent>
        </Card>
    );
}