"use client";

import { useState, useEffect, useCallback, useRef } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from '@/components/ui/label';
import { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from "@/components/ui/sheet";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from "@/components/ui/dialog";
import { Progress } from "@/components/ui/progress";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Play, Pause, RefreshCw, Trash2, Wind, Settings, Target, Plus, CheckCircle2, BellPlus, History, Clock, BellRing } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';
import { cn } from '@/lib/utils';

// Pomodoro Timer
const PomodoroTimer = () => { type Mode = 'pomodoro' | 'shortBreak' | 'longBreak'; const defaultSettings = { pomodoro: 25, shortBreak: 5, longBreak: 15, longBreakInterval: 4, }; const [settings, setSettings] = useState(() => { if (typeof window === 'undefined') return defaultSettings; try { const saved = localStorage.getItem('pomodoroSettings'); return saved ? { ...defaultSettings, ...JSON.parse(saved) } : defaultSettings; } catch { return defaultSettings; } }); const [mode, setMode] = useState<Mode>('pomodoro'); const [timeLeft, setTimeLeft] = useState(settings.pomodoro * 60); const [isActive, setIsActive] = useState(false); const audioRef = useRef<HTMLAudioElement>(null); const [pomodoroCount, setPomodoroCount] = useState(() => { if (typeof window === 'undefined') return 0; const saved = localStorage.getItem('pomodoroCount'); return saved ? JSON.parse(saved) : 0; }); useEffect(() => { localStorage.setItem('pomodoroSettings', JSON.stringify(settings)); }, [settings]); useEffect(() => { localStorage.setItem('pomodoroCount', JSON.stringify(pomodoroCount)); }, [pomodoroCount]); useEffect(() => { if (!isActive) { setTimeLeft(settings[mode] * 60); } }, [settings, mode, isActive]); const sessionThemes = { pomodoro: { color: 'var(--red-500)', textColor: 'text-red-500' }, shortBreak: { color: 'var(--green-500)', textColor: 'text-green-500' }, longBreak: { color: 'var(--blue-500)', textColor: 'text-blue-500' }, }; const playSound = useCallback(() => { audioRef.current?.play().catch(e => console.error("Audio play failed:", e)); }, []); const selectMode = useCallback((newMode: Mode) => { setMode(newMode); setIsActive(false); setTimeLeft(settings[newMode].duration * 60); }, [settings]); const handleSessionEnd = useCallback(() => { playSound(); if (Notification.permission === "granted") new Notification("Session Over!"); if (mode === 'pomodoro') { const newCount = pomodoroCount + 1; setPomodoroCount(newCount); selectMode(newCount % settings.longBreakInterval === 0 ? 'longBreak' : 'shortBreak'); } else { selectMode('pomodoro'); } }, [mode, pomodoroCount, settings, playSound, selectMode]); useEffect(() => { let interval: NodeJS.Timeout | null = null; if (isActive && timeLeft > 0) interval = setInterval(() => setTimeLeft(time => time - 1), 1000); else if (timeLeft === 0 && isActive) handleSessionEnd(); return () => { if(interval) clearInterval(interval); }; }, [isActive, timeLeft, handleSessionEnd]); useEffect(() => { document.title = isActive ? `${Math.floor(timeLeft / 60).toString().padStart(2, '0')}:${(timeLeft % 60).toString().padStart(2, '0')} - Focus...` : 'UtilsHub'; return () => { document.title = 'UtilsHub'; }; }, [timeLeft, isActive]); const toggleTimer = () => setIsActive(!isActive); const progress = (timeLeft / (settings[mode].duration * 60)) * 100; const minutes = Math.floor(timeLeft / 60); const seconds = timeLeft % 60; return ( <motion.div className="p-4 flex flex-col items-center space-y-4 max-w-md mx-auto rounded-lg" animate={{ backgroundColor: `hsla(${sessionThemes[mode].color.replace('var(--','')}, 0.1)`}} transition={{duration: 0.5}}> <audio ref={audioRef} src="/notification.mp3" preload="auto"></audio> <div className="w-full flex justify-between items-center"> <div className="text-sm font-semibold text-muted-foreground">Pomodoros today: {pomodoroCount}</div> <Sheet><SheetTrigger asChild><Button variant="ghost" size="icon"><Settings className="h-5 w-5"/></Button></SheetTrigger><SheetContent><SheetHeader><SheetTitle>Pomodoro Settings</SheetTitle></SheetHeader><div className="space-y-4 py-4"> <div><Label>Pomodoro (minutes)</Label><Input type="number" value={settings.pomodoro} onChange={e => setSettings(s => ({ ...s, pomodoro: Number(e.target.value) }))} /></div> <div><Label>Short Break (minutes)</Label><Input type="number" value={settings.shortBreak} onChange={e => setSettings(s => ({ ...s, shortBreak: Number(e.target.value) }))} /></div> <div><Label>Long Break (minutes)</Label><Input type="number" value={settings.longBreak} onChange={e => setSettings(s => ({ ...s, longBreak: Number(e.target.value) }))} /></div> <div><Label>Long break interval</Label><Input type="number" value={settings.longBreakInterval} onChange={e => setSettings(s => ({ ...s, longBreakInterval: Number(e.target.value) }))} /></div></div></SheetContent></Sheet> </div> <div className="relative w-64 h-64 flex items-center justify-center"> <svg className="absolute w-full h-full" viewBox="0 0 100 100"> <circle cx="50" cy="50" r="45" className="stroke-current text-gray-200 dark:text-gray-700" strokeWidth="4" fill="transparent" /> <motion.circle cx="50" cy="50" r="45" className={cn("stroke-current", sessionThemes[mode].textColor)} strokeWidth="4" fill="transparent" strokeLinecap="round" transform="rotate(-90 50 50)" initial={{ pathLength: 1 }} animate={{ pathLength: progress / 100 }} transition={{ duration: 1, ease: "linear" }}/> </svg> <div className="absolute font-mono text-6xl font-bold">{`${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`}</div> </div> <Button onClick={toggleTimer} size="lg" className="w-36 h-12 text-lg rounded-full shadow-lg text-white" style={{backgroundColor: `hsl(${sessionThemes[mode].color.replace('var(--','')})`}}> {isActive ? <Pause className="mr-2 h-5 w-5"/> : <Play className="mr-2 h-5 w-5"/>} {isActive ? 'Pause' : 'Start'} </Button> </motion.div> ); };
const TaskList = () => { type Task = { id: number; text: string; completed: boolean }; const [tasks, setTasks] = useState<Task[]>([]); const [newTask, setNewTask] = useState(''); useEffect(() => { try { const savedTasks = localStorage.getItem('utilsHubTasks'); if (savedTasks) setTasks(JSON.parse(savedTasks)); } catch(e) { console.error(e) } }, []); useEffect(() => { localStorage.setItem('utilsHubTasks', JSON.stringify(tasks)); }, [tasks]); const handleAddTask = (e: React.FormEvent) => { e.preventDefault(); if (!newTask.trim()) return; setTasks([...tasks, { id: Date.now(), text: newTask, completed: false }]); setNewTask(''); }; const toggleTask = (id: number) => { setTasks(tasks.map(task => task.id === id ? { ...task, completed: !task.completed } : task)); }; const removeTask = (id: number) => { setTasks(tasks.filter(task => task.id !== id)); }; return ( <div className="p-2 max-w-lg mx-auto space-y-4"> <form onSubmit={handleAddTask} className="flex gap-2"> <Input value={newTask} onChange={e => setNewTask(e.target.value)} placeholder="Add a new task..." /> <Button type="submit">Add Task</Button> </form> <div className="space-y-2"> {tasks.map(task => ( <div key={task.id} className="flex items-center gap-3 p-2 bg-muted rounded-md"> <Checkbox id={`task-${task.id}`} checked={task.completed} onCheckedChange={() => toggleTask(task.id)} /> <Label htmlFor={`task-${task.id}`} className={cn("flex-grow", task.completed && "line-through text-muted-foreground")}>{task.text}</Label> <Button variant="ghost" size="icon" onClick={() => removeTask(task.id)}><Trash2 className="h-4 w-4 text-red-500"/></Button> </div> ))} </div> </div> ); };
const BreathingExercise = () => { const [phase, setPhase] = useState<'idle' | 'in' | 'hold' | 'out'>('idle'); const phases = { in: { text: "Breathe In", duration: 4000 }, hold: { text: "Hold", duration: 7000 }, out: { text: "Breathe Out", duration: 8000 }, }; useEffect(() => { if (phase === 'idle') return; const sequence: (keyof typeof phases)[] = ['in', 'hold', 'out']; const currentPhaseIndex = sequence.indexOf(phase as keyof typeof phases); const nextPhaseIndex = (currentPhaseIndex + 1) % sequence.length; const nextPhase = sequence[nextPhaseIndex]; const timer = setTimeout(() => setPhase(nextPhase), phases[phase as keyof typeof phases].duration); return () => clearTimeout(timer); }, [phase, phases]); const isRunning = phase !== 'idle'; return ( <div className="p-2 flex flex-col items-center justify-center space-y-8 max-w-md mx-auto h-96"> <div className="relative w-64 h-64"> <motion.div className="absolute inset-0 bg-blue-200 dark:bg-blue-900 rounded-full" animate={{ scale: isRunning ? 1.5 : 1, opacity: isRunning ? 0.3 : 0 }} transition={{ duration: isRunning ? phases[phase].duration / 1000 : 0.5, ease: 'easeInOut', repeat: isRunning ? Infinity : 0, repeatType: "mirror" }} /> <motion.div className="absolute inset-0 rounded-full border-4 border-blue-500 flex items-center justify-center"> <AnimatePresence mode="wait"> <motion.p key={phase} initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }} transition={{ duration: 0.5 }} className="text-2xl font-semibold text-blue-800 dark:text-blue-200" > {isRunning ? phases[phase].text : "Relax"} </motion.p> </AnimatePresence> </motion.div> </div> <Button onClick={() => setPhase(isRunning ? 'idle' : 'in')} size="lg" className="w-48"> <Wind className="mr-2 h-4 w-4" /> {isRunning ? 'Stop Session' : 'Start Session'} </Button> </div> ); };
const GoalTracker = () => { type Goal = { id: number; title: string; current: number; target: number; }; const [goals, setGoals] = useState<Goal[]>([]); const [isDialogOpen, setDialogOpen] = useState(false); const [newGoal, setNewGoal] = useState({ title: '', target: 100 }); useEffect(() => { const savedGoals = localStorage.getItem('userGoals'); if (savedGoals) setGoals(JSON.parse(savedGoals)); }, []); useEffect(() => { localStorage.setItem('userGoals', JSON.stringify(goals)); }, [goals]); const addGoal = () => { if (!newGoal.title || newGoal.target <= 0) return; setGoals([...goals, { ...newGoal, id: Date.now(), current: 0 }]); setNewGoal({ title: '', target: 100 }); setDialogOpen(false); }; const updateGoal = (id: number, amount: number) => { setGoals(goals.map(g => g.id === id ? { ...g, current: Math.max(0, g.current + amount) } : g)); }; const removeGoal = (id: number) => setGoals(goals.filter(g => g.id !== id)); return ( <div className="p-2 space-y-4"> <div className="text-right"> <Dialog open={isDialogOpen} onOpenChange={setDialogOpen}><DialogTrigger asChild><Button><Plus className="mr-2 h-4 w-4" /> Add New Goal</Button></DialogTrigger><DialogContent><DialogHeader><DialogTitle>Create a New Goal</DialogTitle></DialogHeader><div className="space-y-4 py-4"> <div><Label>Goal Title</Label><Input value={newGoal.title} onChange={e => setNewGoal(g => ({...g, title: e.target.value}))} placeholder="e.g., Read 10 books" /></div> <div><Label>Target Value</Label><Input type="number" value={newGoal.target} onChange={e => setNewGoal(g => ({...g, target: Number(e.target.value)}))} /></div></div><DialogFooter><Button onClick={addGoal}>Create Goal</Button></DialogFooter></DialogContent></Dialog> </div> <div className="space-y-6"> {goals.map(goal => { const progress = Math.min((goal.current / goal.target) * 100, 100); return ( <div key={goal.id} className="p-4 border rounded-lg"> <div className="flex justify-between items-center mb-2"> <h3 className="font-semibold">{goal.title}</h3> <Button variant="ghost" size="icon" onClick={() => removeGoal(goal.id)}><Trash2 className="h-4 w-4 text-red-500"/></Button> </div> <Progress value={progress} className="w-full mb-2" /> <div className="flex justify-between items-center"> <span className="text-sm text-muted-foreground">{goal.current} / {goal.target}</span> <div className="flex gap-2"> <Button size="sm" onClick={() => updateGoal(goal.id, -1)}>-</Button> <Button size="sm" onClick={() => updateGoal(goal.id, 1)}>+</Button> </div> </div> </div> ); })} </div> </div> ); };
const AnalyticsDashboard = () => { const [stats, setStats] = useState({ pomodoros: 0, tasksDone: 0 }); useEffect(() => { const pomodoroCount = JSON.parse(localStorage.getItem('pomodoroCount') || '0'); const tasks: {completed: boolean}[] = JSON.parse(localStorage.getItem('utilsHubTasks') || '[]'); const tasksDone = tasks.filter((t) => t.completed).length; setStats({ pomodoros: pomodoroCount, tasksDone }); }, []); const StatCard = ({ title, value, icon }: { title: string, value: number, icon: React.ReactNode }) => ( <Card><CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2"><CardTitle className="text-sm font-medium">{title}</CardTitle>{icon}</CardHeader><CardContent><div className="text-2xl font-bold">{value}</div></CardContent></Card> ); return ( <div className="p-2 grid gap-4 md:grid-cols-2"> <StatCard title="Pomodoros Completed" value={stats.pomodoros} icon={<RefreshCw className="h-4 w-4 text-muted-foreground" />} /> <StatCard title="Tasks Completed" value={stats.tasksDone} icon={<CheckCircle2 className="h-4 w-4 text-muted-foreground" />} /> </div> ); };
const GentleReminders = () => { type Reminder = { id: number; text: string; type: 'once' | 'recurring'; time?: string; interval?: number; lastNotified?: number; notified?: boolean; }; const [reminders, setReminders] = useState<Reminder[]>([]); const [reminderType, setReminderType] = useState<'once' | 'recurring'>('once'); const [newReminderText, setNewReminderText] = useState('Time for a 5-min break!'); const [newReminderTime, setNewReminderTime] = useState(''); const [newReminderInterval, setNewReminderInterval] = useState(30); useEffect(() => { const saved = localStorage.getItem('gentleReminders'); if (saved) setReminders(JSON.parse(saved)); }, []); useEffect(() => { localStorage.setItem('gentleReminders', JSON.stringify(reminders)); }, [reminders]); useEffect(() => { const checkReminders = () => { const now = Date.now(); const todayStr = new Date().toDateString(); setReminders(prevReminders => prevReminders.map(reminder => { let shouldNotify = false; const updatedReminder = { ...reminder }; if (reminder.type === 'once') { if (!reminder.notified && reminder.time) { const reminderTime = new Date(`${todayStr} ${reminder.time}`).getTime(); if (reminderTime <= now) { shouldNotify = true; updatedReminder.notified = true; } } } else if (reminder.type === 'recurring') { if (reminder.interval && reminder.lastNotified) { if (now >= reminder.lastNotified + (reminder.interval * 60 * 1000)) { shouldNotify = true; updatedReminder.lastNotified = now; } } } if (shouldNotify && Notification.permission === "granted") { new Notification("UtilsHub Reminder", { body: reminder.text, icon: '/favicon.ico', badge: '/logo.png' }); } return updatedReminder; })); }; const intervalId = setInterval(checkReminders, 15000); return () => clearInterval(intervalId); }, [reminders]); const addReminder = (e: React.FormEvent) => { e.preventDefault(); if (!newReminderText) return; let newReminder: Reminder; if (reminderType === 'once') { if (!newReminderTime) return; newReminder = { id: Date.now(), text: newReminderText, type: 'once', time: newReminderTime, notified: false }; } else { if (!newReminderInterval || newReminderInterval <= 0) return; newReminder = { id: Date.now(), text: newReminderText, type: 'recurring', interval: newReminderInterval, lastNotified: Date.now() }; } setReminders(prev => [...prev, newReminder]); }; const removeReminder = (id: number) => setReminders(reminders.filter(r => r.id !== id)); return ( <div className="p-2 max-w-lg mx-auto space-y-6"> <form onSubmit={addReminder} className="p-4 border rounded-lg space-y-4"> <h3 className="font-semibold text-lg">Add a New Nudge</h3> <RadioGroup value={reminderType} onValueChange={(v: 'once' | 'recurring') => setReminderType(v)} className="flex gap-4"> <div className="flex items-center space-x-2"><RadioGroupItem value="once" id="r1" /><Label htmlFor="r1">One-time</Label></div> <div className="flex items-center space-x-2"><RadioGroupItem value="recurring" id="r2" /><Label htmlFor="r2">Recurring</Label></div> </RadioGroup> <div className="space-y-2"><Label>Reminder Text</Label><Input value={newReminderText} onChange={e => setNewReminderText(e.target.value)} /></div> {reminderType === 'once' ? ( <div className="space-y-2"><Label>Time</Label><Input type="time" value={newReminderTime} onChange={e => setNewReminderTime(e.target.value)} /></div> ) : ( <div className="space-y-2"><Label>Repeat every (minutes)</Label><Input type="number" min="1" value={newReminderInterval} onChange={e => setNewReminderInterval(Number(e.target.value))} /></div> )} <Button type="submit" className="w-full"><BellPlus className="mr-2 h-4 w-4"/> Set Reminder</Button> </form> <div className="space-y-3"> <h3 className="font-semibold text-lg">Active Nudges</h3> <AnimatePresence> {reminders.length === 0 && ( <motion.div initial={{ opacity: 0, y: 10 }} animate={{ opacity: 1, y: 0 }} className="text-center text-muted-foreground py-8 space-y-2"> <BellRing className="mx-auto h-10 w-10" /> <p>No active reminders.</p> <p className="text-xs">Use the form above to set a new nudge.</p> </motion.div> )} {reminders.map(r => ( <motion.div key={r.id} layout initial={{ opacity: 0, y: 20, scale: 0.95 }} animate={{ opacity: 1, y: 0, scale: 1 }} exit={{ opacity: 0, x: -50, transition: { duration: 0.2 } }} > <Card className="flex items-center"> <CardContent className="p-4 flex-grow flex items-center gap-4"> <div className="p-2 bg-primary/10 text-primary rounded-full"> {r.type === 'once' ? <Clock className="h-5 w-5"/> : <History className="h-5 w-5"/>} </div> <div> <p className="font-medium">{r.text}</p> <p className="text-sm text-muted-foreground"> {r.type === 'once' ? `Today at ${r.time}` : `Repeats every ${r.interval} minutes`} </p> </div> </CardContent> <div className="pr-4"> <Button variant="ghost" size="icon" onClick={() => removeReminder(r.id)}><Trash2 className="h-4 w-4 text-red-500"/></Button> </div> </Card> </motion.div> ))} </AnimatePresence> </div> </div> ); };

export function DigitalDetoxHub() {
    return (
        <Card className="w-full max-w-4xl mx-auto shadow-xl shadow-gray-300/20 rounded-2xl border">
            <CardHeader className="text-center"><CardTitle className="text-3xl md:text-4xl font-bold tracking-tight">Digital Detox Hub</CardTitle><CardDescription className="text-lg pt-1">Tools to help you focus, manage tasks, and find balance.</CardDescription></CardHeader>
            <CardContent>
                <Tabs defaultValue="pomodoro" className="w-full">
                    <TabsList className="grid w-full grid-cols-3 md:grid-cols-6 h-auto">
                        <TabsTrigger value="pomodoro">Pomodoro</TabsTrigger>
                        <TabsTrigger value="tasks">Tasks</TabsTrigger>
                        <TabsTrigger value="breathing">Breathing</TabsTrigger>
                        <TabsTrigger value="goals">Goals</TabsTrigger>
                        <TabsTrigger value="analytics">Analytics</TabsTrigger>
                        <TabsTrigger value="reminders">Reminders</TabsTrigger>
                    </TabsList>
                    <div className="pt-6">
                        <TabsContent value="pomodoro"><PomodoroTimer /></TabsContent>
                        <TabsContent value="tasks"><TaskList /></TabsContent>
                        <TabsContent value="breathing"><BreathingExercise /></TabsContent>
                        <TabsContent value="goals"><GoalTracker /></TabsContent>
                        <TabsContent value="analytics"><AnalyticsDashboard /></TabsContent>
                        <TabsContent value="reminders"><GentleReminders /></TabsContent>
                    </div>
                </Tabs>
            </CardContent>
        </Card>
    );
}