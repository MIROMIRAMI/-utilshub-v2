"use client";

import { useState, useEffect, useMemo } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Button } from '@/components/ui/button';
import { Calendar, Clock, Globe, ArrowRightLeft, User, Cake } from 'lucide-react';

const AgeCalculator = () => { const [birthDate, setBirthDate] = useState('1990-01-01'); const age = useMemo(() => { if (!birthDate) return null; const today = new Date(); const birth = new Date(birthDate); let years = today.getFullYear() - birth.getFullYear(); let months = today.getMonth() - birth.getMonth(); let days = today.getDate() - birth.getDate(); if (days < 0) { months--; days += new Date(today.getFullYear(), today.getMonth(), 0).getDate(); } if (months < 0) { years--; months += 12; } const totalDays = Math.floor((today.getTime() - birth.getTime()) / (1000 * 60 * 60 * 24)); const nextBirthday = new Date(today.getFullYear(), birth.getMonth(), birth.getDate()); if (today > nextBirthday) nextBirthday.setFullYear(today.getFullYear() + 1); const daysUntilNextBirthday = Math.ceil((nextBirthday.getTime() - today.getTime()) / (1000 * 60 * 60 * 24)); return { years, months, days, totalDays, daysUntilNextBirthday }; }, [birthDate]); return ( <div className="p-2 space-y-4"> <div><Label htmlFor="birthdate">Your Date of Birth</Label><Input id="birthdate" type="date" value={birthDate} onChange={e => setBirthDate(e.target.value)} /></div> {age && ( <div className="space-y-4"> <div className="text-center bg-muted p-6 rounded-lg"> <p className="text-sm text-muted-foreground">You are</p> <p className="text-4xl font-bold tracking-tight">{age.years} <span className="text-2xl font-normal">years</span> {age.months} <span className="text-2xl font-normal">months</span> & {age.days} <span className="text-2xl font-normal">days</span> old</p> </div> <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 text-center"> <div className="p-3 border rounded-lg"><p className="text-sm text-muted-foreground">Total Days Lived</p><p className="text-2xl font-semibold">{age.totalDays.toLocaleString()}</p></div> <div className="p-3 border rounded-lg"><p className="text-sm text-muted-foreground">Next Birthday In</p><p className="text-2xl font-semibold">{age.daysUntilNextBirthday} days</p></div> </div> </div> )} </div> ); };
const DateCalculator = () => { const [startDate, setStartDate] = useState(new Date().toISOString().split('T')[0]); const [operation, setOperation] = useState<'add' | 'subtract'>('add'); const [days, setDays] = useState(7); const [months, setMonths] = useState(0); const [years, setYears] = useState(0); const resultDate = useMemo(() => { const date = new Date(startDate); const factor = operation === 'add' ? 1 : -1; date.setDate(date.getDate() + (days * factor)); date.setMonth(date.getMonth() + (months * factor)); date.setFullYear(date.getFullYear() + (years * factor)); return date.toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }); }, [startDate, operation, days, months, years]); return ( <div className="p-2 space-y-4"> <div className="grid grid-cols-1 md:grid-cols-2 gap-4"> <div className="space-y-2"><Label>Start Date</Label><Input type="date" value={startDate} onChange={e => setStartDate(e.target.value)} /></div> <div className="space-y-2"><Label>Operation</Label><Select value={operation} onValueChange={(v: 'add' | 'subtract') => setOperation(v)}><SelectTrigger><SelectValue /></SelectTrigger><SelectContent><SelectItem value="add">Add</SelectItem><SelectItem value="subtract">Subtract</SelectItem></SelectContent></Select></div> </div> <div className="grid grid-cols-3 gap-4"> <div className="space-y-2"><Label>Years</Label><Input type="number" value={years} onChange={e => setYears(Number(e.target.value))} /></div> <div className="space-y-2"><Label>Months</Label><Input type="number" value={months} onChange={e => setMonths(Number(e.target.value))} /></div> <div className="space-y-2"><Label>Days</Label><Input type="number" value={days} onChange={e => setDays(Number(e.target.value))} /></div> </div> <div className="mt-6 text-center bg-primary text-primary-foreground p-4 rounded-lg"> <p className="text-sm opacity-80">Resulting Date</p> <p className="text-3xl font-bold">{resultDate}</p> </div> </div> ); };
const DurationCalculator = () => { const [startDate, setStartDate] = useState(new Date().toISOString().split('T')[0]); const [endDate, setEndDate] = useState(() => { const d = new Date(); d.setDate(d.getDate() + 7); return d.toISOString().split('T')[0]; }); const duration = useMemo(() => { const start = new Date(startDate); const end = new Date(endDate); if (isNaN(start.getTime()) || isNaN(end.getTime())) return null; const diff = Math.abs(end.getTime() - start.getTime()); const totalDays = Math.floor(diff / (1000 * 60 * 60 * 24)); const years = Math.floor(totalDays / 365); const remainingDaysAfterYears = totalDays % 365; const months = Math.floor(remainingDaysAfterYears / 30.44); const days = Math.round(remainingDaysAfterYears % 30.44); return { years, months, days, totalDays, totalWeeks: Math.floor(totalDays / 7), totalHours: totalDays * 24, totalMinutes: totalDays * 24 * 60 }; }, [startDate, endDate]); return ( <div className="p-2 space-y-4"> <div className="grid grid-cols-1 md:grid-cols-2 gap-4"> <div className="space-y-2"><Label>Start Date</Label><Input type="date" value={startDate} onChange={e => setStartDate(e.target.value)} /></div> <div className="space-y-2"><Label>End Date</Label><Input type="date" value={endDate} onChange={e => setEndDate(e.target.value)} /></div> </div> {duration && ( <div className="space-y-4"> <div className="text-center bg-muted p-4 rounded-lg"> <p className="text-sm text-muted-foreground">Duration between dates is</p> <p className="text-2xl font-bold">{duration.years} years, {duration.months} months, {duration.days} days</p> </div> <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center"> <div className="p-2 border rounded-lg"><p className="text-xs text-muted-foreground">Total Days</p><p className="font-semibold">{duration.totalDays.toLocaleString()}</p></div> <div className="p-2 border rounded-lg"><p className="text-xs text-muted-foreground">Total Weeks</p><p className="font-semibold">{duration.totalWeeks.toLocaleString()}</p></div> <div className="p-2 border rounded-lg"><p className="text-xs text-muted-foreground">Total Hours</p><p className="font-semibold">{duration.totalHours.toLocaleString()}</p></div> <div className="p-2 border rounded-lg"><p className="text-xs text-muted-foreground">Total Minutes</p><p className="font-semibold">{duration.totalMinutes.toLocaleString()}</p></div> </div> </div> )} </div> ); };
const TimezoneConverter = () => { const [timezones, setTimezones] = useState<string[]>([]); const defaultCities = useMemo(() => [ { name: 'Your Location', tz: Intl.DateTimeFormat().resolvedOptions().timeZone }, { name: 'New York', tz: 'America/New_York' }, { name: 'London', tz: 'Europe/London' }, { name: 'Tokyo', tz: 'Asia/Tokyo' }, { name: 'Sydney', tz: 'Australia/Sydney' }, ], []); const [cities, setCities] = useState(defaultCities); const [currentTime, setCurrentTime] = useState(new Date()); useEffect(() => { try { const tzNames = (Intl as any).supportedValuesOf('timeZone'); setTimezones(tzNames); } catch (e) { console.error("Timezone listing not supported."); } const timer = setInterval(() => setCurrentTime(new Date()), 1000); return () => clearInterval(timer); }, []); const addCity = (tz: string) => { if (!cities.some(c => c.tz === tz)) { setCities(prev => [...prev, { name: tz.split('/').pop()?.replace('_', ' ') || tz, tz }]); } }; return ( <div className="p-2 space-y-4"> <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 items-end"> <div className="space-y-2"> <Label>Add Timezone</Label> <Select onValueChange={addCity}> <SelectTrigger><SelectValue placeholder="Search for a timezone..." /></SelectTrigger> <SelectContent className="max-h-60"> {timezones.map(tz => <SelectItem key={tz} value={tz}>{tz.replace('_', ' ')}</SelectItem>)} </SelectContent> </Select> </div> <div className="text-center"> <Button variant="outline" onClick={() => setCities(defaultCities)}>Reset to Default</Button> </div> </div> <div className="space-y-3"> {cities.map((city, index) => ( <div key={index} className="grid grid-cols-3 items-center p-3 bg-muted rounded-lg"> <div className="font-semibold">{city.name}</div> <div className="text-center font-mono text-2xl"> {currentTime.toLocaleTimeString('en-US', { timeZone: city.tz, hour: '2-digit', minute: '2-digit', hour12: false })} </div> <div className="text-right text-sm text-muted-foreground"> {currentTime.toLocaleDateString('en-US', { timeZone: city.tz, weekday: 'short', month: 'short', day: 'numeric' })} </div> </div> ))} </div> </div> ); };

export function DateTimeHub() {
    return (
        <Card className="w-full max-w-4xl mx-auto shadow-xl shadow-gray-300/20 rounded-2xl border">
            <CardHeader className="text-center">
                <CardTitle className="text-3xl md:text-4xl font-bold tracking-tight">Date & Time Hub</CardTitle>
                <CardDescription className="text-lg pt-1">Your command center for all date and time calculations.</CardDescription>
            </CardHeader>
            <CardContent>
                <Tabs defaultValue="age" className="w-full">
                    <TabsList className="grid w-full grid-cols-2 md:grid-cols-4 h-auto">
                        <TabsTrigger value="age" className="py-2"><Cake className="w-4 h-4 mr-2"/>Age</TabsTrigger>
                        <TabsTrigger value="date-calc" className="py-2"><Calendar className="w-4 h-4 mr-2"/>Date Calc</TabsTrigger>
                        <TabsTrigger value="duration" className="py-2"><ArrowRightLeft className="w-4 h-4 mr-2"/>Duration</TabsTrigger>
                        <TabsTrigger value="timezone" className="py-2"><Globe className="w-4 h-4 mr-2"/>Timezones</TabsTrigger>
                    </TabsList>
                    <div className="pt-6">
                        <TabsContent value="age"><AgeCalculator /></TabsContent>
                        <TabsContent value="date-calc"><DateCalculator /></TabsContent>
                        <TabsContent value="duration"><DurationCalculator /></TabsContent>
                        <TabsContent value="timezone"><TimezoneConverter /></TabsContent>
                    </div>
                </Tabs>
            </CardContent>
        </Card>
    );
}