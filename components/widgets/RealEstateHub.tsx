"use client";

import { useState, useMemo } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Slider } from '@/components/ui/slider';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';
import { PieChart, Pie, Cell, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { cn } from '@/lib/utils';
import { Wallet, Landmark, Banknote, Home, Building, CalendarOff, PiggyBank, ShieldAlert } from 'lucide-react';

const MortgageCalculator = () => { const [homePrice, setHomePrice] = useState(350000); const [downPayment, setDownPayment] = useState(70000); const [loanTerm, setLoanTerm] = useState(30); const [interestRate, setInterestRate] = useState(6.5); const [propertyTax, setPropertyTax] = useState(300); const [homeInsurance, setHomeInsurance] = useState(100); const principal = homePrice - downPayment; const monthlyInterestRate = interestRate / 100 / 12; const numberOfPayments = loanTerm * 12; const monthlyPayment = useMemo(() => { if (principal <= 0 || monthlyInterestRate <= 0) return 0; return principal * (monthlyInterestRate * Math.pow(1 + monthlyInterestRate, numberOfPayments)) / (Math.pow(1 + monthlyInterestRate, numberOfPayments) - 1); }, [principal, monthlyInterestRate, numberOfPayments]); const totalMonthlyPayment = monthlyPayment + propertyTax + homeInsurance; const amortizationSchedule = useMemo(() => { const schedule = []; let balance = principal; for (let i = 0; i < numberOfPayments; i++) { if (balance <= 0) break; const interestPayment = balance * monthlyInterestRate; const principalPayment = monthlyPayment - interestPayment; balance -= principalPayment; schedule.push({ month: i + 1, principal: principalPayment, interest: interestPayment, balance: balance > 0 ? balance : 0 }); } return schedule; }, [principal, monthlyInterestRate, numberOfPayments, monthlyPayment]); const chartData = [ { name: 'Principal & Interest', value: monthlyPayment }, { name: 'Property Tax', value: propertyTax }, { name: 'Home Insurance', value: homeInsurance }, ]; const COLORS = ['#0ea5e9', '#f97316', '#8b5cf6']; return ( <div className="grid grid-cols-1 lg:grid-cols-5 gap-8 p-2"> <div className="lg:col-span-2 space-y-4"> <div><Label>Home Price</Label><Input value={`$${homePrice.toLocaleString()}`} onChange={e => setHomePrice(Number(e.target.value.replace(/\D/g,'')))} /></div> <div><Label>Down Payment ({((downPayment/homePrice)*100 || 0).toFixed(1)}%)</Label><Input value={`$${downPayment.toLocaleString()}`} onChange={e => setDownPayment(Number(e.target.value.replace(/\D/g,'')))} /><Slider value={[downPayment]} onValueChange={v => setDownPayment(v[0])} max={homePrice} step={1000} className="mt-2" /></div> <div><Label>Loan Term</Label><Select value={String(loanTerm)} onValueChange={v => setLoanTerm(Number(v))}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="30">30 Years</SelectItem><SelectItem value="20">20 Years</SelectItem><SelectItem value="15">15 Years</SelectItem></SelectContent></Select></div> <div><Label>Interest Rate (%)</Label><Input type="number" value={interestRate} onChange={e => setInterestRate(Number(e.target.value))} /></div> <div className="grid grid-cols-2 gap-4"><div><Label>Property Tax/mo</Label><Input type="number" value={propertyTax} onChange={e => setPropertyTax(Number(e.target.value))} /></div><div><Label>Home Insurance/mo</Label><Input type="number" value={homeInsurance} onChange={e => setHomeInsurance(Number(e.target.value))} /></div></div> </div> <div className="lg:col-span-3 space-y-4"> <div className="text-center bg-primary text-primary-foreground p-6 rounded-lg"><p className="opacity-80">Estimated Monthly Payment</p><p className="text-5xl font-bold tracking-tight">${totalMonthlyPayment.toFixed(2)}</p></div> <div style={{ width: '100%', height: 200 }}><ResponsiveContainer><PieChart><Pie data={chartData} dataKey="value" nameKey="name" cx="50%" cy="50%" outerRadius={60} fill="#8884d8">{chartData.map((entry, index) => <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />)}</Pie><Tooltip formatter={(value: number) => `$${value.toFixed(2)}`} /><Legend /></PieChart></ResponsiveContainer></div> <Accordion type="single" collapsible className="w-full"><AccordionItem value="amortization"><AccordionTrigger>View Amortization Schedule</AccordionTrigger><AccordionContent><div className="h-64 overflow-y-auto pr-2"><table className="w-full text-sm text-left"><thead className="sticky top-0 bg-muted"><tr><th className="p-2">Month</th><th className="p-2">Principal</th><th className="p-2">Interest</th><th className="p-2">Balance</th></tr></thead><tbody>{amortizationSchedule.map(row => <tr key={row.month} className="border-b"><td className="p-2">{row.month}</td><td className="p-2 text-green-600">${row.principal.toFixed(2)}</td><td className="p-2 text-red-600">${row.interest.toFixed(2)}</td><td className="p-2">${row.balance.toFixed(2)}</td></tr>)}</tbody></table></div></AccordionContent></AccordionItem></Accordion> </div> </div> ); };
const AffordabilityCalculator = () => { const [monthlyIncome, setMonthlyIncome] = useState(6000); const [monthlyDebts, setMonthlyDebts] = useState(500); const [downPayment, setDownPayment] = useState(50000); const [interestRate, setInterestRate] = useState(6.5); const [loanTermValue, setLoanTermValue] = useState(30); const affordability = useMemo(() => { const maxHousingPayment = monthlyIncome * 0.28; const maxTotalDebtPayment = monthlyIncome * 0.36; const maxAffordableMortgage = maxTotalDebtPayment - monthlyDebts; const affordablePI = Math.min(maxHousingPayment, maxAffordableMortgage); if (affordablePI <= 0) return { affordableHomePrice: 0, affordableMonthlyPayment: 0 }; const monthlyRate = interestRate / 100 / 12; const numberOfPayments = loanTermValue * 12; const affordablePrincipal = affordablePI * ( (Math.pow(1 + monthlyRate, numberOfPayments) - 1) / (monthlyRate * Math.pow(1 + monthlyRate, numberOfPayments)) ); const affordableHomePrice = affordablePrincipal + downPayment; return { affordableHomePrice, affordableMonthlyPayment: affordablePI }; }, [monthlyIncome, monthlyDebts, downPayment, interestRate, loanTermValue]); return ( <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 p-2"> <div className="space-y-6"> <div><Label htmlFor="income" className="flex items-center"><Wallet className="w-4 h-4 mr-2" /> Gross Monthly Income</Label><Input id="income" type="number" value={monthlyIncome} onChange={e => setMonthlyIncome(Number(e.target.value))} placeholder="$6,000" /></div> <div><Label htmlFor="debts" className="flex items-center"><Banknote className="w-4 h-4 mr-2" /> Monthly Debt Payments</Label><Input id="debts" type="number" value={monthlyDebts} onChange={e => setMonthlyDebts(Number(e.target.value))} placeholder="$500 (car, student loans, etc.)" /></div> <div><Label htmlFor="downpayment" className="flex items-center"><Landmark className="w-4 h-4 mr-2" /> Available Down Payment</Label><Input id="downpayment" type="number" value={downPayment} onChange={e => setDownPayment(Number(e.target.value))} placeholder="$50,000" /></div> <div className="grid grid-cols-2 gap-4"> <div><Label>Interest Rate (%)</Label><Input type="number" value={interestRate} onChange={e => setInterestRate(Number(e.target.value))} /></div> <div><Label>Loan Term</Label><Select value={String(loanTermValue)} onValueChange={v => setLoanTermValue(Number(v))}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="30">30 Years</SelectItem><SelectItem value="20">20 Years</SelectItem><SelectItem value="15">15 Years</SelectItem></SelectContent></Select></div> </div> </div> <div className="space-y-4 text-center bg-muted p-6 rounded-lg flex flex-col items-center justify-center"> <p className="font-medium text-muted-foreground">You can afford a home up to</p> <p className="text-5xl font-extrabold tracking-tight text-primary">${affordability.affordableHomePrice.toLocaleString(undefined, { maximumFractionDigits: 0 })}</p> <div className="border-t w-full my-4"></div> <p className="font-medium text-muted-foreground">With an estimated monthly payment of</p> <p className="text-3xl font-bold">${affordability.affordableMonthlyPayment.toLocaleString(undefined, { maximumFractionDigits: 0 })}</p> <p className="text-xs text-muted-foreground mt-1">(Principal & Interest only)</p> </div> </div> ); };
const RentVsBuyCalculator = () => { const [homePrice, setHomePrice] = useState(350000); const [loanTermValue, setLoanTermValue] = useState(30); const [interestRate, setInterestRate] = useState(6.5); const [downPayment, setDownPayment] = useState(70000); const [propertyTaxRate, setPropertyTaxRate] = useState(1.2); const [maintenanceCost, setMaintenanceCost] = useState(1); const [monthlyRent, setMonthlyRent] = useState(2000); const [rentIncrease, setRentIncrease] = useState(3); const [stayDuration, setStayDuration] = useState(7); const [appreciation, setAppreciation] = useState(4); const totalCosts = useMemo(() => { let totalBuyingCost = 0, totalRentingCost = 0, currentRent = monthlyRent; const principal = homePrice - downPayment; const monthlyRate = interestRate / 100 / 12; const numPayments = loanTermValue * 12; const monthlyPI = principal > 0 ? (principal * (monthlyRate * Math.pow(1 + monthlyRate, numPayments)) / (Math.pow(1 + monthlyRate, numPayments) - 1)) : 0; const upfrontCost = downPayment; let homeValue = homePrice; for (let year = 1; year <= stayDuration; year++) { const annualPI = monthlyPI * 12; const annualTaxes = homeValue * (propertyTaxRate / 100); const annualMaint = homeValue * (maintenanceCost / 100); totalBuyingCost += annualPI + annualTaxes + annualMaint; homeValue *= (1 + appreciation / 100); } const netBuyingCost = totalBuyingCost + upfrontCost - (homeValue - homePrice); for (let year = 1; year <= stayDuration; year++) { totalRentingCost += currentRent * 12; currentRent *= (1 + rentIncrease / 100); } return { buying: netBuyingCost, renting: totalRentingCost }; }, [homePrice, loanTermValue, interestRate, downPayment, propertyTaxRate, maintenanceCost, monthlyRent, rentIncrease, stayDuration, appreciation]); const cheaperOption = totalCosts.buying < totalCosts.renting ? 'Buying' : 'Renting'; return ( <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 p-2"> <div className="space-y-4"> <div className="p-4 border rounded-lg"><h3 className="font-semibold flex items-center mb-2"><Home className="w-5 h-5 mr-2" />Buying Costs</h3><div className="grid grid-cols-2 gap-x-4 gap-y-2"><div><Label>Home Price</Label><Input type="number" value={homePrice} onChange={e=>setHomePrice(Number(e.target.value))} /></div><div><Label>Down Payment</Label><Input type="number" value={downPayment} onChange={e=>setDownPayment(Number(e.target.value))} /></div><div><Label>Interest Rate %</Label><Input type="number" value={interestRate} onChange={e=>setInterestRate(Number(e.target.value))} /></div><div><Label>Property Tax %/yr</Label><Input type="number" value={propertyTaxRate} onChange={e=>setPropertyTaxRate(Number(e.target.value))} /></div></div></div> <div className="p-4 border rounded-lg"><h3 className="font-semibold flex items-center mb-2"><Building className="w-5 h-5 mr-2" />Renting Costs</h3><div className="grid grid-cols-2 gap-x-4 gap-y-2"><div><Label>Monthly Rent</Label><Input type="number" value={monthlyRent} onChange={e=>setMonthlyRent(Number(e.target.value))} /></div><div><Label>Rent Increase %/yr</Label><Input type="number" value={rentIncrease} onChange={e=>setRentIncrease(Number(e.target.value))} /></div></div></div> <div className="p-4 border rounded-lg"><h3 className="font-semibold flex items-center mb-2">General Assumptions</h3><div className="grid grid-cols-2 gap-x-4 gap-y-2"><div><Label>How long you stay (yrs)</Label><Input type="number" value={stayDuration} onChange={e=>setStayDuration(Number(e.target.value))} /></div><div><Label>Home Appreciation %/yr</Label><Input type="number" value={appreciation} onChange={e=>setAppreciation(Number(e.target.value))} /></div></div></div> </div> <div className="space-y-4 text-center bg-muted p-6 rounded-lg flex flex-col items-center justify-center"> <p className="font-medium text-muted-foreground">Over {stayDuration} years, the cheaper option is</p> <p className={`text-6xl font-extrabold tracking-tight ${cheaperOption === 'Buying' ? 'text-green-600' : 'text-orange-500'}`}>{cheaperOption}</p> <div className="border-t w-full my-4"></div> <div className="w-full space-y-2"> <div className="flex justify-between items-center"><span className="font-semibold">Total Cost of Buying</span><span className="font-bold text-lg">${totalCosts.buying.toLocaleString(undefined, {maximumFractionDigits: 0})}</span></div> <div className="flex justify-between items-center"><span className="font-semibold">Total Cost of Renting</span><span className="font-bold text-lg">${totalCosts.renting.toLocaleString(undefined, {maximumFractionDigits: 0})}</span></div> </div> <p className="text-xs text-muted-foreground mt-4">Note: This is a simplified estimation and doesn&apos;t include all factors like closing costs or tax deductions.</p> </div> </div> ); };
const RefinanceCalculator = () => { const [currentPrincipal, setCurrentPrincipal] = useState(300000); const [currentRate, setCurrentRate] = useState(7.0); const [paymentsMade, setPaymentsMade] = useState(24); const [newRate, setNewRate] = useState(5.5); const [newTermValue, setNewTermValue] = useState(30); const [closingCosts, setClosingCosts] = useState(5000); const calculation = useMemo(() => { const currentMonthlyRate = currentRate / 100 / 12; const currentNumPayments = 30 * 12; const currentMonthlyPI = currentPrincipal * (currentMonthlyRate * Math.pow(1 + currentMonthlyRate, currentNumPayments)) / (Math.pow(1 + currentMonthlyRate, currentNumPayments) - 1); let remainingBalance = currentPrincipal; for (let i = 0; i < paymentsMade; i++) { const interest = remainingBalance * currentMonthlyRate; remainingBalance -= (currentMonthlyPI - interest); } const newPrincipal = remainingBalance + closingCosts; const newMonthlyRate = newRate / 100 / 12; const newNumPayments = newTermValue * 12; const newMonthlyPI = newPrincipal * (newMonthlyRate * Math.pow(1 + newMonthlyRate, newNumPayments)) / (Math.pow(1 + newMonthlyRate, newNumPayments) - 1); if (!isFinite(newMonthlyPI) || newMonthlyPI <= 0) return null; const monthlySavings = currentMonthlyPI - newMonthlyPI; const breakEvenMonths = monthlySavings > 0 ? closingCosts / monthlySavings : 0; return { newMonthlyPI, monthlySavings, breakEvenMonths } }, [currentPrincipal, currentRate, paymentsMade, newRate, newTermValue, closingCosts]); return ( <div className="space-y-6 p-2"> <div className="grid grid-cols-1 md:grid-cols-2 gap-6"> <div className="p-4 border rounded-lg space-y-4"><h3 className="font-semibold text-lg">Current Loan Details</h3><div><Label>Original Loan Amount</Label><Input type="number" value={currentPrincipal} onChange={e=>setCurrentPrincipal(Number(e.target.value))} /></div><div><Label>Interest Rate (%)</Label><Input type="number" value={currentRate} onChange={e=>setCurrentRate(Number(e.target.value))} /></div><div><Label>Payments Made (months)</Label><Input type="number" value={paymentsMade} onChange={e=>setPaymentsMade(Number(e.target.value))} /></div></div> <div className="p-4 border rounded-lg space-y-4"><h3 className="font-semibold text-lg">New Loan Details</h3><div><Label>New Interest Rate (%)</Label><Input type="number" value={newRate} onChange={e=>setNewRate(Number(e.target.value))} /></div><div><Label>New Loan Term (years)</Label><Input type="number" value={newTermValue} onChange={e=>setNewTermValue(Number(e.target.value))} /></div><div><Label>Closing Costs</Label><Input type="number" value={closingCosts} onChange={e=>setClosingCosts(Number(e.target.value))} /></div></div> </div> {calculation && (<div className="mt-6 text-center bg-muted p-6 rounded-lg"><div className="grid grid-cols-1 sm:grid-cols-3 gap-4"><div><p className="text-sm text-muted-foreground">New Monthly P&I</p><p className="text-3xl font-bold text-primary">${calculation.newMonthlyPI.toFixed(2)}</p></div><div><p className="text-sm text-muted-foreground">Monthly Savings</p><p className={`text-3xl font-bold ${calculation.monthlySavings > 0 ? 'text-green-600' : 'text-red-500'}`}>${calculation.monthlySavings.toFixed(2)}</p></div><div><p className="text-sm text-muted-foreground">Break-Even Point</p><p className="text-3xl font-bold">{calculation.breakEvenMonths > 0 ? `${Math.ceil(calculation.breakEvenMonths)} months` : 'N/A'}</p></div></div></div>)} </div> ); };
const MortgagePayoffCalculator = () => { const [loanAmount, setLoanAmount] = useState(280000); const [interestRate, setInterestRate] = useState(6.5); const [loanTermValue, setLoanTermValue] = useState(30); const [extraPayment, setExtraPayment] = useState(200); const calculation = useMemo(() => { const monthlyRate = interestRate / 100 / 12; const originalPayments = loanTermValue * 12; const originalPI = loanAmount * (monthlyRate * Math.pow(1 + monthlyRate, originalPayments)) / (Math.pow(1 + monthlyRate, originalPayments) - 1); const totalOriginalInterest = (originalPI * originalPayments) - loanAmount; const newMonthlyPayment = originalPI + extraPayment; let balance = loanAmount; let newPayments = 0; let totalInterestPaid = 0; while (balance > 0) { const interest = balance * monthlyRate; totalInterestPaid += interest; balance -= (newMonthlyPayment - interest); newPayments++; if (newPayments > originalPayments * 2) break; } const yearsSaved = (originalPayments - newPayments) / 12; const interestSaved = totalOriginalInterest - totalInterestPaid; return { yearsSaved, interestSaved }; }, [loanAmount, interestRate, loanTermValue, extraPayment]); return( <div className="p-2"> <div className="grid grid-cols-1 md:grid-cols-2 gap-6"> <div className="space-y-4"> <div><Label>Current Loan Amount</Label><Input type="number" value={loanAmount} onChange={e=>setLoanAmount(Number(e.target.value))} /></div> <div><Label>Interest Rate (%)</Label><Input type="number" value={interestRate} onChange={e=>setInterestRate(Number(e.target.value))} /></div> <div><Label>Remaining Term (years)</Label><Input type="number" value={loanTermValue} onChange={e=>setLoanTermValue(Number(e.target.value))} /></div> </div> <div className="space-y-4"> <Label>Extra Monthly Payment</Label> <Input type="number" value={extraPayment} onChange={e=>setExtraPayment(Number(e.target.value))} /> <Slider value={[extraPayment]} onValueChange={v => setExtraPayment(v[0])} max={1000} step={10} className="mt-2" /> </div> </div> {calculation && ( <div className="mt-6 text-center bg-muted p-6 rounded-lg"> <div className="grid grid-cols-1 sm:grid-cols-2 gap-4"> <div className="flex flex-col items-center justify-center p-4"><CalendarOff className="w-10 h-10 mb-2 text-blue-500" /><p className="text-sm text-muted-foreground">You&apos;ll pay off your loan</p><p className="text-3xl font-bold">{calculation.yearsSaved.toFixed(1)} years early</p></div> <div className="flex flex-col items-center justify-center p-4"><PiggyBank className="w-10 h-10 mb-2 text-green-600" /><p className="text-sm text-muted-foreground">And save a total of</p><p className="text-3xl font-bold">${calculation.interestSaved.toLocaleString(undefined, {maximumFractionDigits: 0})}</p></div> </div> </div> )} </div> ); };
const DebtToIncomeCalculator = () => { const [monthlyIncome, setMonthlyIncome] = useState(6000); const [housingPayment, setHousingPayment] = useState(1800); const [otherDebts, setOtherDebts] = useState(500); const { dti, category, advice } = useMemo(() => { if (monthlyIncome <= 0) return { dti: 0, category: 'ideal', advice: 'Please enter a valid monthly income.' }; const totalDebts = housingPayment + otherDebts; const ratio = (totalDebts / monthlyIncome) * 100; let cat: 'ideal' | 'manageable' | 'high' = 'ideal'; let adv = 'Your debt is at a very manageable level. Lenders see you as a very favorable borrower.'; if (ratio > 43) { cat = 'high'; adv = 'Your debt level is high, making it difficult to qualify for new loans. Consider paying down debts.'; } else if (ratio > 36) { cat = 'manageable'; adv = 'Your debt is manageable, but reducing it could improve your financial flexibility and loan options.'; } return { dti: ratio, category: cat, advice: adv }; }, [monthlyIncome, housingPayment, otherDebts]); const categoryStyles = { ideal: 'bg-green-600', manageable: 'bg-yellow-500', high: 'bg-red-500', }; return ( <div className="p-2"> <div className="grid grid-cols-1 md:grid-cols-2 gap-6"> <div className="space-y-4"> <div><Label>Gross Monthly Income</Label><Input type="number" value={monthlyIncome} onChange={e=>setMonthlyIncome(Number(e.target.value))} /></div> <div><Label>Monthly Housing Payment</Label><Input type="number" value={housingPayment} onChange={e=>setHousingPayment(Number(e.target.value))} /></div> <div><Label>Other Monthly Debts</Label><Input type="number" value={otherDebts} onChange={e=>setOtherDebts(Number(e.target.value))} /></div> </div> <div className="flex flex-col items-center justify-center text-center bg-muted p-6 rounded-lg"> <p className="text-sm text-muted-foreground">Your Debt-to-Income Ratio is</p> <p className="text-6xl font-extrabold my-2">{dti.toFixed(1)}%</p> <div className="w-full bg-gray-200 rounded-full h-4 dark:bg-gray-700"> <div className={cn("h-4 rounded-full transition-all duration-500", categoryStyles[category])} style={{ width: `${Math.min(dti, 100)}%` }} ></div> </div> <p className="text-xs text-muted-foreground mt-4">{advice}</p> </div> </div> </div> ); };
const AprCalculator = () => { const [loanAmount, setLoanAmount] = useState(300000); const [interestRate, setInterestRate] = useState(6.5); const [loanTermValue, setLoanTermValue] = useState(30); const [loanFees, setLoanFees] = useState(4000); const apr = useMemo(() => { const principal = loanAmount; const rate = interestRate / 100; const termInMonths = loanTermValue * 12; if (principal <= 0 || rate <= 0) return { apr: 0, monthlyPayment: 0 }; const monthlyRate = rate / 12; const monthlyPayment = principal * (monthlyRate * Math.pow(1 + monthlyRate, termInMonths)) / (Math.pow(1 + monthlyRate, termInMonths) - 1); const totalPaid = monthlyPayment * termInMonths; const totalCost = totalPaid - principal; const totalFinanceCharge = totalCost + loanFees; const aprValue = ((totalFinanceCharge / principal) / termInMonths) * 12 * 100; return { apr: aprValue }; }, [loanAmount, interestRate, loanTermValue, loanFees]); return ( <div className="p-2"> <div className="grid grid-cols-1 md:grid-cols-2 gap-6"> <div className="space-y-4"> <div><Label>Loan Amount</Label><Input type="number" value={loanAmount} onChange={e=>setLoanAmount(Number(e.target.value))} /></div> <div><Label>Interest Rate (%)</Label><Input type="number" value={interestRate} onChange={e=>setInterestRate(Number(e.target.value))} /></div> <div><Label>Loan Term (years)</Label><Input type="number" value={loanTermValue} onChange={e=>setLoanTermValue(Number(e.target.value))} /></div> <div><Label>Loan Fees & Costs</Label><Input type="number" value={loanFees} onChange={e=>setLoanFees(Number(e.target.value))} /></div> </div> <div className="flex flex-col items-center justify-center text-center bg-muted p-6 rounded-lg space-y-4"> <div> <p className="text-sm text-muted-foreground">Nominal Interest Rate</p> <p className="text-3xl font-bold">{interestRate}%</p> </div> <div className="w-full border-t"></div> <div> <p className="text-sm text-muted-foreground">Annual Percentage Rate (APR)</p> <p className="text-5xl font-extrabold text-primary">{apr.apr.toFixed(3)}%</p> <p className="text-xs text-muted-foreground mt-2">The true cost of your loan.</p> </div> </div> </div> </div> ); };
const DownPaymentCalculator = () => { const [homePrice, setHomePrice] = useState(400000); const [downPaymentPercent, setDownPaymentPercent] = useState(20); const [interestRate, setInterestRate] = useState(6.5); const [loanTermValue, setLoanTermValue] = useState(30); const calculation = useMemo(() => { const downPaymentAmount = homePrice * (downPaymentPercent / 100); const loanAmount = homePrice - downPaymentAmount; const monthlyRate = interestRate / 100 / 12; const numberOfPayments = loanTermValue * 12; const monthlyPI = loanAmount > 0 ? loanAmount * (monthlyRate * Math.pow(1 + monthlyRate, numberOfPayments)) / (Math.pow(1 + monthlyRate, numberOfPayments) - 1) : 0; const needsPMI = downPaymentPercent < 20; return { downPaymentAmount, monthlyPI, needsPMI }; }, [homePrice, downPaymentPercent, interestRate, loanTermValue]); return ( <div className="p-2"> <div className="grid grid-cols-1 md:grid-cols-2 gap-6"> <div className="space-y-4"> <div><Label>Home Price</Label><Input type="number" value={homePrice} onChange={e=>setHomePrice(Number(e.target.value))} /></div> <div> <Label>Down Payment ({downPaymentPercent}%)</Label> <Slider value={[downPaymentPercent]} onValueChange={v => setDownPaymentPercent(v[0])} max={50} step={1} className="my-2" /> </div> <div><Label>Interest Rate (%)</Label><Input type="number" value={interestRate} onChange={e=>setInterestRate(Number(e.target.value))} /></div> </div> <div className="flex flex-col items-center justify-center text-center bg-muted p-6 rounded-lg space-y-3"> <div> <p className="text-sm text-muted-foreground">Down Payment Amount</p> <p className="text-3xl font-bold text-primary">${calculation.downPaymentAmount.toLocaleString()}</p> </div> <div> <p className="text-sm text-muted-foreground">Monthly Payment (P&I)</p> <p className="text-3xl font-bold">${calculation.monthlyPI.toLocaleString(undefined, {maximumFractionDigits: 2})}</p> </div> {calculation.needsPMI && ( <div className="flex items-center text-yellow-600 dark:text-yellow-400 text-xs p-2 bg-yellow-400/10 rounded-md"> <ShieldAlert className="w-4 h-4 mr-2" /> A down payment below 20% typically requires Private Mortgage Insurance (PMI). </div> )} </div> </div> </div> ); };
const RentalPropertyCalculator = () => { const [price, setPrice] = useState(250000); const [downPayment, setDownPayment] = useState(50000); const [interestRate, setInterestRate] = useState(7.0); const [loanTermValue, setLoanTermValue] = useState(30); const [monthlyRent, setMonthlyRent] = useState(2200); const [vacancyRate, setVacancyRate] = useState(5); const [propertyTax, setPropertyTax] = useState(250); const [insurance, setInsurance] = useState(80); const [maintenance, setMaintenance] = useState(10); const [managementFee, setManagementFee] = useState(8); const calculation = useMemo(() => { const principal = price - downPayment; const monthlyRate = interestRate / 100 / 12; const numPayments = loanTermValue * 12; const mortgagePayment = principal > 0 ? principal * (monthlyRate * Math.pow(1 + monthlyRate, numPayments)) / (Math.pow(1 + monthlyRate, numPayments) - 1) : 0; const grossMonthlyIncome = monthlyRent; const vacancyLoss = grossMonthlyIncome * (vacancyRate / 100); const effectiveGrossIncome = grossMonthlyIncome - vacancyLoss; const monthlyMaintenance = effectiveGrossIncome * (maintenance / 100); const monthlyManagement = effectiveGrossIncome * (managementFee / 100); const totalOperatingExpenses = propertyTax + insurance + monthlyMaintenance + monthlyManagement + vacancyLoss; const netOperatingIncome = (effectiveGrossIncome - (totalOperatingExpenses - vacancyLoss)) * 12; const monthlyCashFlow = effectiveGrossIncome - mortgagePayment - (totalOperatingExpenses - vacancyLoss); const capRate = (netOperatingIncome / price) * 100; const totalInvestment = downPayment; const cashOnCashReturn = ((monthlyCashFlow * 12) / totalInvestment) * 100; return { monthlyCashFlow, capRate, cashOnCashReturn } }, [price, downPayment, interestRate, loanTermValue, monthlyRent, vacancyRate, propertyTax, insurance, maintenance, managementFee]); return ( <div className="p-2"> <div className="grid grid-cols-1 lg:grid-cols-3 gap-6"> <div className="lg:col-span-2 grid grid-cols-1 md:grid-cols-2 gap-6"> <div className="p-3 border rounded-lg space-y-2"><h4 className="font-semibold">Property & Loan</h4> <div><Label>Purchase Price</Label><Input type="number" value={price} onChange={e=>setPrice(Number(e.target.value))} /></div> <div><Label>Down Payment</Label><Input type="number" value={downPayment} onChange={e=>setDownPayment(Number(e.target.value))} /></div> <div><Label>Interest Rate (%)</Label><Input type="number" value={interestRate} onChange={e=>setInterestRate(Number(e.target.value))} /></div> </div> <div className="p-3 border rounded-lg space-y-2"><h4 className="font-semibold">Income & Expenses</h4> <div><Label>Gross Monthly Rent</Label><Input type="number" value={monthlyRent} onChange={e=>setMonthlyRent(Number(e.target.value))} /></div> <div><Label>Vacancy Rate (%)</Label><Input type="number" value={vacancyRate} onChange={e=>setVacancyRate(Number(e.target.value))} /></div> <div><Label>Property Tax ($/mo)</Label><Input type="number" value={propertyTax} onChange={e=>setPropertyTax(Number(e.target.value))} /></div> <div><Label>Insurance ($/mo)</Label><Input type="number" value={insurance} onChange={e=>setInsurance(Number(e.target.value))} /></div> <div><Label>Maintenance (% rent)</Label><Input type="number" value={maintenance} onChange={e=>setMaintenance(Number(e.target.value))} /></div> <div><Label>Management (% rent)</Label><Input type="number" value={managementFee} onChange={e=>setManagementFee(Number(e.target.value))} /></div> </div> </div> <div className="space-y-4 text-center bg-muted p-6 rounded-lg flex flex-col justify-around"> <div> <p className="text-sm text-muted-foreground">Monthly Cash Flow</p> <p className={`text-4xl font-bold ${calculation.monthlyCashFlow > 0 ? 'text-green-600' : 'text-red-500'}`}> ${calculation.monthlyCashFlow.toLocaleString(undefined, {maximumFractionDigits: 2})} </p> </div> <div className="w-full border-t"></div> <div className="grid grid-cols-2 gap-4 text-xs"> <div className="text-center"> <p className="font-semibold text-muted-foreground">Cap Rate</p> <p className="text-lg font-bold">{calculation.capRate.toFixed(2)}%</p> </div> <div className="text-center"> <p className="font-semibold text-muted-foreground">Cash-on-Cash</p> <p className="text-lg font-bold">{calculation.cashOnCashReturn.toFixed(2)}%</p> </div> </div> </div> </div> </div> ); };

export function RealEstateHub() {
    return (
        <Card className="w-full max-w-6xl mx-auto shadow-xl shadow-gray-300/20 rounded-2xl border">
            <CardHeader className="text-center"><CardTitle className="text-3xl md:text-4xl font-bold tracking-tight">Mortgage & Real Estate Hub</CardTitle><CardDescription className="text-lg pt-1">Your central dashboard for property and loan calculations.</CardDescription></CardHeader>
            <CardContent>
                <Tabs defaultValue="mortgage" className="w-full">
                    <TabsList className="grid w-full grid-cols-2 sm:grid-cols-4 h-auto"><TabsTrigger value="mortgage">Mortgage Calculator</TabsTrigger><TabsTrigger value="affordability">Affordability</TabsTrigger><TabsTrigger value="rent-vs-buy">Rent vs. Buy</TabsTrigger><TabsTrigger value="advanced">Advanced</TabsTrigger></TabsList>
                    <div className="pt-6">
                        <TabsContent value="mortgage"><MortgageCalculator /></TabsContent>
                        <TabsContent value="affordability"><AffordabilityCalculator /></TabsContent>
                        <TabsContent value="rent-vs-buy"><RentVsBuyCalculator /></TabsContent>
                        <TabsContent value="advanced">
                            <Accordion type="single" collapsible defaultValue="refinance" className="w-full">
                                <AccordionItem value="refinance"><AccordionTrigger className="text-lg font-semibold">Refinance Calculator</AccordionTrigger><AccordionContent><RefinanceCalculator /></AccordionContent></AccordionItem>
                                <AccordionItem value="payoff"><AccordionTrigger className="text-lg font-semibold">Early Payoff Calculator</AccordionTrigger><AccordionContent><MortgagePayoffCalculator /></AccordionContent></AccordionItem>
                                <AccordionItem value="dti"><AccordionTrigger className="text-lg font-semibold">Debt-to-Income (DTI) Ratio</AccordionTrigger><AccordionContent><DebtToIncomeCalculator /></AccordionContent></AccordionItem>
                                <AccordionItem value="apr"><AccordionTrigger className="text-lg font-semibold">APR Calculator</AccordionTrigger><AccordionContent><AprCalculator /></AccordionContent></AccordionItem>
                                <AccordionItem value="down-payment"><AccordionTrigger className="text-lg font-semibold">Down Payment Calculator</AccordionTrigger><AccordionContent><DownPaymentCalculator /></AccordionContent></AccordionItem>
                                <AccordionItem value="rental-property"><AccordionTrigger className="text-lg font-semibold">Rental Property Calculator</AccordionTrigger><AccordionContent><RentalPropertyCalculator /></AccordionContent></AccordionItem>
                            </Accordion>
                        </TabsContent>
                    </div>
                </Tabs>
            </CardContent>
        </Card>
    );
}