"use client";

import { useState, useEffect, useCallback, useRef } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { RefreshCw, Award, PawPrint, Cat, Bird, Fish, Rabbit, Squirrel, Turtle, Snail, Hand, Scissors, Gem, Trophy } from 'lucide-react';
import { cn } from '@/lib/utils';
import { motion, AnimatePresence } from 'framer-motion';

const TicTacToe = () => { const [board, setBoard] = useState<( 'X' | 'O' | null)[]>(Array(9).fill(null)); const [xIsNext, setXIsNext] = useState(true); const calculateWinner = (squares: ('X'|'O'|null)[]) => { const lines = [ [0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6], ]; for (let i = 0; i < lines.length; i++) { const [a, b, c] = lines[i]; if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) return squares[a]; } return null; }; const winner = calculateWinner(board); const isDraw = !winner && board.every(square => square !== null); let status; if (winner) { status = `Winner: ${winner}`; } else if (isDraw) { status = "It's a Draw!"; } else { status = `Next player: ${xIsNext ? 'X' : 'O'}`; } const handleClick = (i: number) => { if (winner || board[i]) return; const newBoard = board.slice(); newBoard[i] = xIsNext ? 'X' : 'O'; setBoard(newBoard); setXIsNext(!xIsNext); }; const resetGame = () => { setBoard(Array(9).fill(null)); setXIsNext(true); }; const Square = ({ value, onClick }: { value: string | null, onClick: () => void }) => ( <Button variant="outline" className="w-24 h-24 text-5xl font-bold" onClick={onClick}> {value} </Button> ); return ( <div className="flex flex-col items-center space-y-4 p-4"> <div className="text-2xl font-semibold">{status}</div> <div className="grid grid-cols-3 gap-2"> {board.map((_, i) => <Square key={i} value={board[i]} onClick={() => handleClick(i)} />)} </div> <Button onClick={resetGame}><RefreshCw className="mr-2 h-4 w-4" /> New Game</Button> </div> ); };
const MemoryGame = () => { const initialIcons = [PawPrint, Cat, Bird, Fish, Rabbit, Squirrel, Turtle, Snail]; const createShuffledDeck = useCallback(() => { return [...initialIcons, ...initialIcons].map((Icon, i) => ({ id: i, Icon, isFlipped: false, isMatched: false })).sort(() => Math.random() - 0.5); }, []); const [cards, setCards] = useState(() => createShuffledDeck()); const [flippedIndices, setFlippedIndices] = useState<number[]>([]); const [moves, setMoves] = useState(0); const [isChecking, setIsChecking] = useState(false); useEffect(() => { if (flippedIndices.length === 2) { setIsChecking(true); const [firstIndex, secondIndex] = flippedIndices; if (cards[firstIndex].Icon === cards[secondIndex].Icon) { setCards(prev => prev.map(card => card.Icon === cards[firstIndex].Icon ? { ...card, isMatched: true } : card)); setFlippedIndices([]); setIsChecking(false); } else { setTimeout(() => { setCards(prev => prev.map((card, index) => index === firstIndex || index === secondIndex ? { ...card, isFlipped: false } : card)); setFlippedIndices([]); setIsChecking(false); }, 1000); } } }, [flippedIndices, cards]); const handleCardClick = (index: number) => { if (isChecking || cards[index].isFlipped || flippedIndices.length === 2) return; setMoves(m => m + 1); setCards(prev => prev.map((card, i) => i === index ? { ...card, isFlipped: true } : card)); setFlippedIndices(prev => [...prev, index]); }; const resetGame = () => { setFlippedIndices([]); setMoves(0); setCards(prev => prev.map(c => ({...c, isFlipped: false, isMatched: true}))); setTimeout(() => { setCards(createShuffledDeck()); }, 300); }; const isGameWon = cards.every(card => card.isMatched); return ( <div className="flex flex-col items-center space-y-4 p-4"> <div className="flex justify-between items-center w-full max-w-md"> <div className="font-semibold text-lg">Moves: {moves}</div> <Button onClick={resetGame} size="sm"><RefreshCw className="mr-2 h-4 w-4" /> Reset Game</Button> </div> <div className="grid grid-cols-4 gap-4"> <AnimatePresence>{cards.map((card, index) => ( <motion.div key={card.id} layout initial={{ opacity: 0, scale: 0.5 }} animate={{ opacity: 1, scale: 1 }} exit={{ opacity: 0, scale: 0.5 }} transition={{ duration: 0.3 }} className="w-20 h-24 perspective-1000" onClick={() => handleCardClick(index)}> <motion.div className="relative w-full h-full preserve-3d cursor-pointer" animate={{ rotateY: card.isFlipped || card.isMatched ? 180 : 0 }} transition={{ duration: 0.5 }}> <div className="absolute w-full h-full backface-hidden bg-primary rounded-lg flex items-center justify-center"><Award className="w-8 h-8 text-primary-foreground" /></div> <div className="absolute w-full h-full backface-hidden bg-muted rounded-lg flex items-center justify-center text-4xl transform-rotate-y-180"><card.Icon className="w-10 h-10" /></div> </motion.div> </motion.div> ))}</AnimatePresence> </div> {isGameWon && <div className="font-bold text-2xl text-green-500 flex items-center mt-4"><Award className="mr-2 h-6 w-6"/> Congratulations, You Won!</div>} </div> ); };
const RockPaperScissors = () => { const choices = [ { name: 'rock', icon: Gem, beats: 'scissors' }, { name: 'paper', icon: Hand, beats: 'rock' }, { name: 'scissors', icon: Scissors, beats: 'paper' }, ]; const [userChoice, setUserChoice] = useState<{name: string; icon: React.ElementType; beats: string; } | null>(null); const [computerChoice, setComputerChoice] = useState<{name: string; icon: React.ElementType; beats: string; } | null>(null); const [result, setResult] = useState(''); const [scores, setScores] = useState({ user: 0, computer: 0 }); const handlePlay = (choiceName: string) => { const user = choices.find(c => c.name === choiceName); const computer = choices[Math.floor(Math.random() * choices.length)]; setUserChoice(user!); setComputerChoice(computer); if (user?.beats === computer.name) { setResult('You Win!'); setScores(s => ({ ...s, user: s.user + 1 })); } else if (computer.beats === user?.name) { setResult('You Lose!'); setScores(s => ({ ...s, computer: s.computer + 1 })); } else { setResult("It's a Draw!"); } }; return ( <div className="flex flex-col items-center space-y-6 p-4"> <div className="text-2xl font-semibold">Choose your weapon!</div> <div className="flex gap-4"> {choices.map(choice => (